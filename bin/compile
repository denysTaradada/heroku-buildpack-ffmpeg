#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

header() {
  echo "" || true
  echo "-----> $*" || true
}

output() {
  while IFS= read -r LINE; do
    # do not indent headers that are being piped through the output
    if [[ "$LINE" =~ ^-----\>.* ]]; then
      echo "$LINE" || true
    else
      echo "       $LINE" || true
    fi
  done
}

header "Installing ffmpeg buildpack"

BUILD_DIR=${1:-}
CACHE_DIR=$2
VENDOR_DIR="vendor"
FFMPEG_ARCHIVE_NAME="ffmpeg.tar.xz"




cd $BUILD_DIR

#####
SRC=${BUILD_DIR}/${VENDOR_DIR}/ffmpeg
DEST=${CACHE_DIR}/buildcache
echo $DEST

if [[ -d "$DEST/ffmpeg" ]]
then
  echo "ffmpeg cache exist. Using cache" | output
  mkdir -p $SRC
  cp -r ${DEST} ${SRC}
else
  mkdir -p $VENDOR_DIR
  cd $VENDOR_DIR
  mkdir -p ffmpeg
  cd ffmpeg

  if [[ -z $FFMPEG_DOWNLOAD_URL ]]; then
    echo "Variable FFMPEG_DOWNLOAD_URL isn't set, using default value" | output
    FFMPEG_DOWNLOAD_URL="https://johnvansickle.com/ffmpeg/builds/ffmpeg-git-amd64-static.tar.xz"
  fi

  echo "Downloading $FFMPEG_DOWNLOAD_URL" | output

  code=$(curl "$FFMPEG_DOWNLOAD_URL" -L --silent --fail --retry 5 --retry-max-time 15 -o ./$FFMPEG_ARCHIVE_NAME --write-out "%{http_code}")

  if [ "$code" != "200" ]; then
    echo "Unable to download ffmpeg: $code" | output && exit 1
  fi

  echo "Unpacking the archive" | output

  tar xJf "./$FFMPEG_ARCHIVE_NAME" --strip-components=1

  if [ "$?" != "0" ]; then
    echo "Failed to unpack" | output && exit 1
  fi

  rm $FFMPEG_ARCHIVE_NAME

  PROFILE_PATH="$BUILD_DIR/.profile.d/ffmpeg.sh"
  mkdir -p $(dirname $PROFILE_PATH)
  echo 'export PATH="$PATH:${HOME}/vendor/ffmpeg"' >> $PROFILE_PATH

  echo $SRC #/tmp/build_3905dd08/vendor/ffmpeg
  echo $DEST #/tmp/codon/tmp/cache/buildcache
  cd ~
  mkdir -p $(dirname ${DEST})
  cp -r ${SRC} ${DEST}
  cd $DEST
  echo $(ls)
fi

echo "Installation successful" | output